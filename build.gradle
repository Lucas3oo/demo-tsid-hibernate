plugins {
  id 'io.micronaut.application' version '3.6.3'
  id 'io.micronaut.test-resources' version '3.6.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply true
  id 'se.solrike.conventions.java-conventions' version '1.0.0-beta.2'
}

version = '0.1'
group = 'com.example.tsid'

// versions
def mapStructVersion = '1.4.1.Final'
def micronautVersion = '3.7.3'



//    dependency 'ch.qos.logback:logback-classic:1.3.5'
//    dependency 'org.slf4j:slf4j-api:2.0.4'


dependencyManagement {
  dependencies {
    dependency 'com.mysql:mysql-connector-j:8.0.31'
    dependency 'io.hypersistence:hypersistence-utils-hibernate-55:3.2.0'
    dependency 'javax.inject:javax.inject:1'
    dependency 'net.logstash.logback:logstash-logback-encoder:6.5'
    dependency 'org.apache.commons:commons-lang3:3.12.0'
    dependency "org.mapstruct:mapstruct:$mapStructVersion"
    dependency "org.mapstruct:mapstruct-processor:$mapStructVersion"

    // test dependeces
    dependency 'org.assertj:assertj-core:3.23.1'

    // imports
    imports {
      mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
      mavenBom 'org.junit:junit-bom:5.9.1'
    }
  }
}


dependencies {
  annotationProcessor 'io.micronaut.data:micronaut-data-processor'
  annotationProcessor 'io.micronaut:micronaut-http-validation'
  annotationProcessor 'org.mapstruct:mapstruct-processor'
  implementation 'io.hypersistence:hypersistence-utils-hibernate-55'
  implementation 'io.micrometer:micrometer-core'
  implementation 'io.micronaut.beanvalidation:micronaut-hibernate-validator'
  implementation 'io.micronaut.data:micronaut-data-hibernate-jpa'
  implementation 'io.micronaut.sql:micronaut-hibernate-jpa'
  implementation 'io.micronaut.sql:micronaut-jdbc-hikari'
  implementation 'io.micronaut:micronaut-http-client'
  implementation 'io.micronaut:micronaut-jackson-databind'
  implementation 'io.micronaut:micronaut-runtime'
  implementation 'io.micronaut:micronaut-validation'
  implementation 'jakarta.annotation:jakarta.annotation-api'
  implementation 'javax.inject:javax.inject'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'org.mapstruct:mapstruct'
  runtimeOnly 'ch.qos.logback:logback-classic'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'net.logstash.logback:logstash-logback-encoder'
  testImplementation 'io.micronaut.test:micronaut-test-junit5'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.mockito:mockito-core'
  testRuntimeOnly 'com.h2database:h2' // should be for test only
}



def applicationClass = 'com.example.tsid.TsIdDemoApplication'
application {
  mainClass.set(applicationClass)
}

java {
  sourceCompatibility = JavaVersion.toVersion('17')
  targetCompatibility = JavaVersion.toVersion('17')
}

graalvmNative.toolchainDetection = false


micronaut {
  version(micronautVersion)
  runtime('netty')
  testRuntime('junit5')
  processing {
    incremental(true)
    annotations('com.example.tsid.*')
  }
}

// Spotbugs
spotbugsMain {
  ignoreFailures = true
}


wrapper {
  gradleVersion = '7.5'
}

